dnl Process this file with autoconf to produce a configure script.
AC_REVISION($Revision: 1.30.2.6 $)dnl

AC_INIT(cdrdao, 1.1.8pre2)

AC_CONFIG_SRCDIR(dao/main.cc)
AM_INIT_AUTOMAKE
AM_CONFIG_HEADER(config.h)
AC_CANONICAL_HOST

AC_ARG_WITH(pcctsbin,[  --with-pcctsbin=dir     set directory of PCCTS parser generator executables],pcctsbin=$withval,pcctsbin=default)
AC_ARG_WITH(pcctsinc,[  --with-pcctsinc=dir     set directory of PCCTS parser generator includes],pcctsinc=$withval,pcctsinc=default)
AC_ARG_WITH(linux-qnx-sched,[  --with-linux-qnx-sched  enable QNX real time scheduling for Linux],AC_DEFINE(LINUX_QNX_SCHEDULING,1,"Use real time scheduling for Linux"))
AC_ARG_WITH(posix-threads,[  --with-posix-threads    use Posix threads for ring buffer (default: on)],use_pthreads=$withval,use_pthreads=default)
AC_ARG_WITH(scglib,[  --with-scglib           use Joerg Schillings SCSI library (default: on)],use_scglib=$withval,use_scglib=default)
AC_ARG_WITH(scglib-inc,[  --with-scglib-inc=dir   set directory for SCSI library include files],scglib_inc=$withval,scglib_inc=default)
AC_ARG_WITH(scglib-lib,[  --with-scglib-lib=dir   set directory that contains the SCSI library],scglib_lib=$withval,scglib_lib=default)


dnl Checks for programs.
AC_PROG_CC
AC_PROG_CXX
AC_PROG_CPP
AC_PROG_INSTALL
AC_PROG_RANLIB
AC_CHECK_PROG(AR,ar,ar)
AC_PROG_MAKE_SET

dnl Checks for header files.
AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS(fcntl.h getopt.h malloc.h unistd.h sys/mman.h sched.h)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_TYPE_SIGNAL
AC_CHECK_SIZEOF(short)
AC_CHECK_SIZEOF(int)
AC_CHECK_SIZEOF(long)
AC_CHECK_SIZEOF(long long)

case 2 in
	$ac_cv_sizeof_short) 
                AC_DEFINE(size16,short,"")
		SIZE16=TRUE;;
	$ac_cv_sizeof_int)
                AC_DEFINE(size16,int,"")
		SIZE16=TRUE;;
esac

case 4 in
	$ac_cv_sizeof_short) SIZE32="short";;
	$ac_cv_sizeof_int) SIZE32="int";;
	$ac_cv_sizeof_long) SIZE32="long";;
esac

AC_CHECK_TYPE(int16_t,,AC_DEFINE_UNQUOTED(int16_t,$SIZE16,""))
AC_CHECK_TYPE(int32_t,,AC_DEFINE_UNQUOTED(int32_t,$SIZE32,""))
AC_CHECK_TYPE(u_int16_t,,AC_DEFINE_UNQUOTED(u_int16_t,$SIZE16,""))
AC_CHECK_TYPE(u_int32_t,,AC_DEFINE_UNQUOTED(u_int32_t,$SIZE32,""))

if test -z "$SIZE16"; then
	AC_MSG_ERROR(No 16 bit type found on this platform!)
fi

dnl Check for additionally required libraries

AC_CHECK_FUNC(sched_getparam,AC_DEFINE(HAVE_SCHED_GETPARAM,1,""),
  AC_CHECK_LIB(posix4,sched_getparam,[use_libposix4=yes;AC_DEFINE(HAVE_SCHED_GETPARAM)]))

AC_CHECK_FUNC(sched_get_priority_max,AC_DEFINE(HAVE_SCHED_GET_PRIORITY_MAX,1,""),
  AC_CHECK_LIB(posix4,sched_get_priority_max,[use_libposix4=yes;AC_DEFINE(HAVE_SCHED_GET_PRIORITY_MAX,1,"")]))

AC_CHECK_FUNC(sched_setscheduler,AC_DEFINE(HAVE_SCHED_SETSCHEDULER,1,""),
  AC_CHECK_LIB(posix4,sched_setscheduler,[use_libposix4=yes;AC_DEFINE(HAVE_SCHED_SETSCHEDULER,1,"")]))

AC_CHECK_LIB(socket,socket,[use_libsocket=yes])
AC_CHECK_LIB(socket,connect,[use_libsocket=yes])

AC_CHECK_LIB(nsl,gethostbyname,[use_libnsl=yes])
AC_CHECK_LIB(nsl,inet_addr,[use_libnsl=yes])
AC_CHECK_LIB(nsl,inet_ntoa,[use_libnsl=yes])

dnl Add 'libsocket' if required
if test "$use_libsocket" = yes; then
  LIBS="$LIBS -lsocket"
fi

dnl Add 'libnsl' if required
if test "$use_libnsl" = yes; then
  LIBS="$LIBS -lnsl"
fi

dnl Check if libposix4 must be linked
if test "$use_libposix4" = yes; then
  LIBS="$LIBS -lposix4"
fi

dnl Checks for library functions.
AC_CHECK_FUNCS(strerror)
AC_CHECK_FUNCS(mlockall munlockall)
AC_CHECK_FUNCS(seteuid setegid getpagesize)
AC_CHECK_FUNCS(usleep)

AC_CHECK_FUNCS(inet_aton)

dnl check if Posix threads should be used
if test "$use_pthreads" = default; then
  use_pthreads=yes
fi

if test "$use_pthreads" = yes; then
  AC_CHECK_FUNC(pthread_create,have_pthread_std=yes,have_pthread_std=no)

  if test "$have_pthread_std" = yes; then
    AC_DEFINE(USE_POSIX_THREADS,1,"")
    thread_libs=""
    thread_test_lib=""
  else
    AC_CHECK_LIB(pthread,pthread_create,have_pthread=yes,have_pthread=no)

    if test "$have_pthread" = yes; then
      AC_DEFINE(USE_POSIX_THREADS,1,"")
      thread_libs="-lpthread"
      thread_test_lib="pthread"
    else
      AC_CHECK_LIB(pthread32,pthread_create,have_pthread32=yes,have_pthread32=no)
      if test "$have_pthread32" = yes; then
        AC_DEFINE(USE_POSIX_THREADS)
        thread_libs="-lpthread32"
        thread_test_lib="pthread32"
      else
        AC_CHECK_LIB(c_r,pthread_create,have_c_r=yes,have_c_r=no)
      
        if test "$have_c_r" = yes; then
          AC_DEFINE(USE_POSIX_THREADS)
          thread_libs="-lc_r"
          thread_test_lib="c_r"
        else
          use_pthreads=no
	fi
      fi
    fi
  fi

  if test "$use_pthreads" = yes; then
    if test "$have_pthread_std" = yes; then
      AC_CHECK_FUNCS(pthread_sigmask pthread_attr_setschedpolicy)
      AC_CHECK_FUNCS(pthread_attr_setschedparam pthread_getschedparam)
      AC_CHECK_FUNCS(pthread_setschedparam)
    else
      AC_CHECK_LIB($thread_test_lib,pthread_sigmask,AC_DEFINE(HAVE_PTHREAD_SIGMASK))
      AC_CHECK_LIB($thread_test_lib,pthread_attr_setschedpolicy,AC_DEFINE(HAVE_PTHREAD_ATTR_SETSCHEDPOLICY))
      AC_CHECK_LIB($thread_test_lib,pthread_attr_setschedparam,AC_DEFINE(HAVE_PTHREAD_ATTR_SETSCHEDPARAM))
      AC_CHECK_LIB($thread_test_lib,pthread_getschedparam,AC_DEFINE(HAVE_PTHREAD_GETSCHEDPARAM))
      AC_CHECK_LIB($thread_test_lib,pthread_setschedparam,AC_DEFINE(HAVE_PTHREAD_SETSCHEDPARAM))
    fi
  fi
fi  

if test "$use_pthreads" = yes; then
  mydefs="-D_THREAD_SAFE -D_REENTRANT $mydefs"
fi


dnl Checks for pccts parser generator
if test "$pcctsbin" = default; then
  antlr_path='$(srcdir)/../pccts/bin/antlr'
  dlg_path='$(srcdir)/../pccts/bin/dlg'

  AC_SUBST(antlr_path)
  AC_SUBST(dlg_path)

  pccts_target="pccts"

else
  AC_PATH_PROG(antlr_path,antlr,no,$pcctsbin)
  AC_PATH_PROG(dlg_path,dlg,no,$pcctsbin)

  if test $antlr_path = "no"; then
    AC_MSG_ERROR([PCCTS: antlr not found in path.])
  fi

  if test $dlg_path = "no" ; then
    AC_MSG_ERROR([PCCTS: dlg not found in path.])
  fi

  pccts_target=""

fi


if test "$pcctsinc" = default; then
  pcctsinc='$(srcdir)/../pccts/h'
fi

utiltools=toc2cue
en_cdrdao=yes
en_toc2cue=yes
en_toc2mp3=no

AC_PATH_LAME(3.92, [utiltools="$utiltools toc2mp3" en_toc2mp3=yes])

en_xdao=yes
en_scsilib=yes
PKG_CHECK_MODULES(GTKMM2, gtkmm-2.0 >= 2.2,[],[en_xdao=no])
PKG_CHECK_MODULES(LIBGUIMM2, libgnomeuimm-2.0 >= 2.0,[],[en_xdao=no])

dnl Determine source for scsi interface class
if test "$use_scglib" = default; then
  use_scglib=yes
fi

if test "$use_scglib" = yes; then
  AC_DEFINE(USE_SCGLIB,1,"")
  AC_DEFINE(SCSI_ATAPI, 1, "Allow ATAPI support device")

  if test "$scglib_inc" = default -o "$scglib_lib" = default; then
    scsilib_dir=scsilib
    scsilib_incl='-I$(srcdir)/../scsilib/export -I$(srcdir)/../scsilib/export/libschily'
    scsilib_libs="-L../scsilib/export"
  else
    scsilib_dir=""
    en_scsilib="no (bypassed by configuration)"
    scsilib_incl="-I$scglib_inc"
    scsilib_libs="-L$scglib_lib"
  fi
  
  scsilib_libs="$scsilib_libs -lscg -lschily"
  scsi_if_src=ScsiIf-lib.cc
  
  case "$host" in
    *-freebsd3* | *-freebsd4*)
			       scsilib_libs="$scsilib_libs -lcam"
			       ;;
  esac

else

  scsilib_dir=""
  scsilib_incl=""
  scsilib_libs=""

  case "$host" in
    *-linux-*)
	       scsi_if_src="ScsiIf-linux.cc sg_err.cc"
	       ;;
    
    *-freebsd3* | *-freebsd4*)
			       scsi_if_src="ScsiIf-freebsd-cam.cc"
			       scsilib_libs="-lcam"
			       ;;

    *-pc-cygwin32)
		   scsi_if_src="ScsiIf-win.cc"
		   ;;

    *)
       AC_MSG_ERROR([Unsupported operating system: $host_os]) 
       ;;
    esac
fi

dnl Selection of buffer code
case "$host" in
  *)
     dao_src=dao.cc
     ;;
esac

dnl Additional operating system dependent selections
case "$host" in
  *-freebsd*)
	      if test "$use_pthreads" = yes; then
		mydefs="-pthread $mydefs"
		LDFLAGS="-pthread $LDFLAGS"
dnl -lc_r is automatically done by the linker
		thread_libs=""
	      fi
	      ;;
  *darwin*)
            AC_DEFINE(_P1003_1B_VISIBLE,1,"")
            LIBS="$LIBS -framework CoreServices -framework IOKit"
            ;;

esac

dnl Sound device selection for xcdrdao
case "$host" in
  *-linux-*)
	     sound_if_obj=SoundIF-linux.o
	     ;;

  *-solaris*)
	      sound_if_obj=SoundIF-solaris.o
	      ;;

  *)
     sound_if_obj=SoundIF-none.o
     ;;
esac


dnl General platform specific setup

case "$host" in
  *-sysv4*)
		mydefs="-DUNIXWARE $mydefs"
		LIBS="$LIBS -L/usr/ucblib -lucb"
		;;
esac


AC_SUBST(scsi_if_src)
AC_SUBST(en_xdao)
AC_SUBST(en_toc2mp3)
AC_SUBST(en_toc2cue)
AC_SUBST(en_cdrdao)
AC_SUBST(scsilib_dir)
AC_SUBST(scsilib_incl)
AC_SUBST(scsilib_libs)
AC_SUBST(pccts_target)
AC_SUBST(pcctsinc)
AC_SUBST(dao_src)
AC_SUBST(sound_if_obj)
AC_SUBST(thread_libs)
AC_SUBST(mydefs)

AM_CONDITIONAL([COND_XDAO], [test "$en_xdao" = yes])
AM_CONDITIONAL([COND_TOC2MP3], [test "$en_toc2mp3" = yes])
AM_CONDITIONAL([COND_SCSILIB], [test "$en_scsilib" = yes])

AC_CONFIG_FILES([
        trackdb/Makefile
        dao/Makefile
        utils/Makefile
        xdao/Makefile
        xdao/stock/Makefile
        paranoia/Makefile
        Makefile
        specs/cdrdao.rh9.spec
        specs/cdrdao.fedora1.spec
        ])

AC_OUTPUT

echo
echo "------------------------------------------------------"
echo "  Building scsilib   : $en_scsilib"
echo "  Building cdrdao    : $en_cdrdao"
echo "  Building toc2cue   : $en_toc2cue"
echo "  Building toc2mp3   : $en_toc2mp3"
echo "  Building gcdmaster : $en_xdao"
echo "------------------------------------------------------"
